{"ast":null,"code":"// for creating Slice and Async Thunk\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\n// firebase database\nimport { db } from \"../../firebaseInit\";\nimport { collection, addDoc, onSnapshot } from \"firebase/firestore\";\n\n// toast notification\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// initial State to store data \n// for list of all the users, if a user is  logged, data of loggedIn user\nconst initialState = {\n  userList: [],\n  isLoggedIn: false,\n  userLoggedIn: null\n};\n\n// Async thunk for getting list of all the users within the firebase database\nexport const getInitialUserList = createAsyncThunk(\"auth/userList\", (args, thunkAPI) => {\n  // getting data from firebase\n  const unsub = onSnapshot(collection(db, \"buybusy-redux\"), snapShot => {\n    const users = snapShot.docs.map(doc => {\n      return {\n        id: doc.id,\n        ...doc.data()\n      };\n    });\n    // storing the userlist inside initialState variable\n    thunkAPI.dispatch(setUserList(users));\n  });\n});\n\n// AsyncThunk for creating new user in database\nexport const createUserThunk = createAsyncThunk(\"auth/createUser\", async (data, thunkAPI) => {\n  // getting userList from initialState\n  const {\n    authReducer\n  } = thunkAPI.getState();\n  const {\n    userList\n  } = authReducer;\n\n  // checking whether user's email already exist or not\n  const index = userList.findIndex(user => user.email === data.email);\n\n  // if email address already exits inside database\n  if (index !== -1) {\n    toast.error('Email address already in use !!');\n    return;\n  }\n\n  // if email not found create new user \n  const docRef = await addDoc(collection(db, \"buybusy-redux\"), {\n    name: data.name,\n    email: data.email,\n    password: data.password,\n    cart: [],\n    orders: []\n  });\n  // notification \n  toast.success(\"New user Created, Please LogIn to Continue !!\");\n});\n\n// AsyncThunk for signIn user\nexport const createSessionThunk = createAsyncThunk(\"auth/createSession\", async (data, thunkAPI) => {\n  // getting userList from initialState\n  const {\n    authReducer\n  } = thunkAPI.getState();\n  const {\n    userList\n  } = authReducer;\n\n  // finding user inside the userList\n  const index = userList.findIndex(user => user.email === data.email);\n\n  // if user not found show notification\n  if (index === -1) {\n    toast.error(\"Email does not exist, Try again or SignUp Instead!!!\");\n    return false;\n  }\n\n  // if email found in database then match password\n  if (userList[index].password === data.password) {\n    toast.success(\"Sign In Successfully!!!\");\n\n    // logging in user and storing its data in local variable\n    thunkAPI.dispatch(setLoggedIn(true));\n    thunkAPI.dispatch(setUserLoggedIn(userList[index]));\n\n    // generating user's login token and store user's data \n    window.localStorage.setItem(\"token\", true);\n    window.localStorage.setItem(\"index\", JSON.stringify(userList[index]));\n    return true;\n  } else {\n    // if password doesn't match in database\n    toast.error(\"Wrong UserName/Password, Try Again\");\n    return false;\n  }\n});\n\n// AsyncThunk for SignOut\nexport const removeSessionThunk = createAsyncThunk(\"auth/removeSession\", () => {\n  // removing user' data and token from local storage\n  window.localStorage.removeItem(\"token\");\n  window.localStorage.removeItem(\"index\");\n});\nconst authSlice = createSlice({\n  name: 'authentication',\n  initialState,\n  reducers: {\n    // to set userList \n    setUserList: (state, action) => {\n      state.userList = action.payload;\n    },\n    // whether user isLoggedIn or not\n    setLoggedIn: (state, action) => {\n      state.isLoggedIn = action.payload;\n    },\n    // data of loggedIn user\n    setUserLoggedIn: (state, action) => {\n      state.userLoggedIn = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(removeSessionThunk.fulfilled, (state, action) => {\n      // removing user's token and data from initialState\n      state.isLoggedIn = false;\n      state.userLoggedIn = null;\n      toast.success(\"Sign Out successfully!!!!\");\n    });\n  }\n});\n\n// exporting the reducer \nexport const authReducer = authSlice.reducer;\n// exporting the reducer actions\nexport const {\n  setLoggedIn,\n  setUserLoggedIn,\n  setUserList\n} = authSlice.actions;\n\n// exporting the user's state to get data\nexport const authSelector = state => state.authReducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","db","collection","addDoc","onSnapshot","toast","initialState","userList","isLoggedIn","userLoggedIn","getInitialUserList","args","thunkAPI","unsub","snapShot","users","docs","map","doc","id","data","dispatch","setUserList","createUserThunk","authReducer","getState","index","findIndex","user","email","error","docRef","name","password","cart","orders","success","createSessionThunk","setLoggedIn","setUserLoggedIn","window","localStorage","setItem","JSON","stringify","removeSessionThunk","removeItem","authSlice","reducers","state","action","payload","extraReducers","builder","addCase","fulfilled","reducer","actions","authSelector"],"sources":["C:/Users/kruna/Desktop/MERN STACK DEVELOPER/5_ReactJs/Projects/4_BuyBusy-2/src/Redux/Reducers/authReducer.js"],"sourcesContent":["\n// for creating Slice and Async Thunk\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\n// firebase database\nimport {db} from \"../../firebaseInit\";\nimport { collection, addDoc, onSnapshot } from \"firebase/firestore\"; \n\n// toast notification\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\n// initial State to store data \n// for list of all the users, if a user is  logged, data of loggedIn user\nconst initialState={ userList: [], isLoggedIn: false, userLoggedIn: null };\n\n\n// Async thunk for getting list of all the users within the firebase database\nexport const getInitialUserList = createAsyncThunk(\n    \"auth/userList\",\n    (args,thunkAPI) => {\n        \n        // getting data from firebase\n        const unsub = onSnapshot(collection(db, \"buybusy-redux\"),(snapShot) => {\n            const users = snapShot.docs.map((doc) => {\n                return {\n                    id:doc.id,\n                    ...doc.data()\n                }\n            });\n            // storing the userlist inside initialState variable\n            thunkAPI.dispatch(setUserList(users));\n        });\n    }\n);\n\n\n\n// AsyncThunk for creating new user in database\nexport const createUserThunk = createAsyncThunk(\n    \"auth/createUser\",\n    async (data,thunkAPI) => {\n\n        // getting userList from initialState\n        const {authReducer} = thunkAPI.getState();\n        const {userList} = authReducer;\n\n        // checking whether user's email already exist or not\n        const index =userList.findIndex((user) => user.email === data.email);\n        \n        // if email address already exits inside database\n        if(index !== -1){\n            toast.error('Email address already in use !!');\n            return;\n        }\n\n        // if email not found create new user \n        const docRef =await addDoc(collection(db, \"buybusy-redux\"), {\n            name:data.name,\n            email:data.email,\n            password:data.password,\n            cart:[],\n            orders:[]\n        });\n        // notification \n        toast.success(\"New user Created, Please LogIn to Continue !!\");\n    }\n)\n\n\n// AsyncThunk for signIn user\nexport const createSessionThunk = createAsyncThunk(\n    \"auth/createSession\",\n    async (data,thunkAPI) => {\n\n        // getting userList from initialState\n        const {authReducer} = thunkAPI.getState();\n        const {userList} = authReducer;\n\n        // finding user inside the userList\n        const index = userList.findIndex((user) => user.email === data.email);\n\n        // if user not found show notification\n        if(index === -1){\n            toast.error(\"Email does not exist, Try again or SignUp Instead!!!\");\n            return false;\n        }\n        \n        // if email found in database then match password\n        if(userList[index].password === data.password){\n\n            toast.success(\"Sign In Successfully!!!\");\n            \n            // logging in user and storing its data in local variable\n            thunkAPI.dispatch(setLoggedIn(true));\n            thunkAPI.dispatch(setUserLoggedIn(userList[index]));\n            \n            // generating user's login token and store user's data \n            window.localStorage.setItem(\"token\",true);\n            window.localStorage.setItem(\"index\",JSON.stringify(userList[index]));\n            return true;\n        }\n        else{\n            // if password doesn't match in database\n            toast.error(\"Wrong UserName/Password, Try Again\");\n            return false;\n        }\n    }\n);\n\n\n// AsyncThunk for SignOut\nexport const removeSessionThunk = createAsyncThunk(\n    \"auth/removeSession\",\n    () => {\n\n        // removing user' data and token from local storage\n        window.localStorage.removeItem(\"token\");\n        window.localStorage.removeItem(\"index\");\n    }\n)\n\n\n\nconst authSlice = createSlice({\n    name: 'authentication',\n    initialState,\n    reducers:{\n        // to set userList \n        setUserList: (state,action) => {\n            state.userList=action.payload;\n        },\n        // whether user isLoggedIn or not\n        setLoggedIn: (state,action) => {\n            state.isLoggedIn = action.payload;\n        },\n        // data of loggedIn user\n        setUserLoggedIn: (state,action) => {\n            state.userLoggedIn = action.payload;\n        }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(removeSessionThunk.fulfilled, (state,action) => {\n            // removing user's token and data from initialState\n            state.isLoggedIn=false;\n            state.userLoggedIn=null;\n            toast.success(\"Sign Out successfully!!!!\");\n        })\n    }\n});\n\n\n// exporting the reducer \nexport const authReducer=authSlice.reducer;\n// exporting the reducer actions\nexport const {setLoggedIn,setUserLoggedIn,setUserList} = authSlice.actions;\n\n// exporting the user's state to get data\nexport const authSelector = (state) => state.authReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}