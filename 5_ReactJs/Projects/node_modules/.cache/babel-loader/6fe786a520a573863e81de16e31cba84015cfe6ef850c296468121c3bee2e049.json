{"ast":null,"code":"// for creating slice and AsycnThunk\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\n// firebase database\nimport { db } from \"../../firebaseInit\";\nimport { updateDoc, doc, arrayUnion, onSnapshot, arrayRemove } from \"firebase/firestore\";\n\n// for toast notificatioins\nimport { toast } from \"react-toastify\";\n\n// return date in yy/mm/dd format\nfunction getDate() {\n  // getting current date\n  const date = new Date();\n  // day \n  let day = date.getDate();\n  // month\n  let month = date.getMonth() + 1;\n  // year\n  let year = date.getFullYear();\n  // yy/mm/dd format\n  return `${year}-${month}-${day}`;\n}\n\n// async thunk to get initial Data of cart items and order placed by user from database\nexport const getInitialCartOrdersThunk = createAsyncThunk('product/getCartOrders', (args, thunkAPI) => {\n  // getting user's data from redux store\n  const {\n    authReducer,\n    productReducer\n  } = thunkAPI.getState();\n  const {\n    isLoggedIn,\n    userLoggedIn\n  } = authReducer;\n\n  // whether user logged In\n  if (isLoggedIn) {\n    // getting real-time update of data\n\n    const unsub = onSnapshot(doc(db, \"buybusy-redux\", userLoggedIn.id), doc => {\n      // storing all the data in cart\n      const data = doc.data();\n      thunkAPI.dispatch(setCart(data.cart));\n      thunkAPI.dispatch(setMyOrders(data.orders));\n    });\n\n    // returning the cart to extraReducer for further operations\n    return productReducer.cart;\n  }\n});\n\n// async thunk to update cart inside the database\nconst updateCartInDatabase = createAsyncThunk('product/updateCartInDatabase', async (args, thunkAPI) => {\n  // user's data from initialState\n  const {\n    authReducer,\n    productReducer\n  } = thunkAPI.getState();\n  const {\n    userLoggedIn\n  } = authReducer;\n\n  // update the cart inside the firebase database\n  const userRef = doc(db, \"buybusy-redux\", userLoggedIn.id);\n  await updateDoc(userRef, {\n    cart: productReducer.cart\n  });\n});\n\n// increase product quantity in cart and database\nexport const increaseQuantThunk = createAsyncThunk(\"product/increaseProductQuantity\", async (product, thunkAPI) => {\n  // user's data\n  const {\n    productReducer\n  } = thunkAPI.getState();\n\n  // finding product inside the cart\n  const index = productReducer.cart.findIndex(item => item.name === product.name);\n\n  // increase the quantity of product in initialState cart\n  thunkAPI.dispatch(increaseProductQuantity(index));\n\n  // increase total amount of products in cart\n  thunkAPI.dispatch(increaseTotalAmount(product.price));\n\n  // update the cart inside the database\n  thunkAPI.dispatch(updateCartInDatabase());\n});\n\n// decrease the quantity of product in cart and database\nexport const decreaseQuantThunk = createAsyncThunk(\"product/decreaseProductQuantity\", async (product, thunkAPI) => {\n  // getting user's data \n  const {\n    productReducer\n  } = thunkAPI.getState();\n\n  // finding the product inside the cart \n  const index = productReducer.cart.findIndex(item => item.name === product.name);\n\n  // if quantity of product is 1 then remove it from the cart\n  if (productReducer.cart[index].quantity === 1) {\n    thunkAPI.dispatch(removeFromCartThunk(product));\n    return;\n  }\n\n  // else\n  // decrease the quantity of product inside the cart\n  thunkAPI.dispatch(decreaseProductQuantity(index));\n\n  // reduce the amount of product from total amount of cart\n  thunkAPI.dispatch(reduceTotalAmount(productReducer.cart[index].price));\n\n  // update the cart inside the database\n  thunkAPI.dispatch(updateCartInDatabase());\n});\n\n// async thunk for adding a new product to the cart\nexport const addToCartThunk = createAsyncThunk(\"product/addToCart\", async (product, thunkAPI) => {\n  // getting user's data \n  const {\n    authReducer,\n    productReducer\n  } = thunkAPI.getState();\n  const {\n    isLoggedIn,\n    userLoggedIn\n  } = authReducer;\n\n  // check whether user is logged in or not\n  if (!isLoggedIn) {\n    toast.error(\"Please first Login !!!\");\n    return;\n  }\n\n  // checking whether the product already in the cart\n  const index = productReducer.cart.findIndex(item => item.name === product.name);\n  if (index !== -1) {\n    // if product already in cart then increase quantity and return\n    thunkAPI.dispatch(increaseQuantThunk(productReducer.cart[index]));\n    toast.success(\"Product Quantity Increased!!\");\n    return;\n  }\n\n  // else\n  // add product to the cart of loggedIn user in database\n  const userRef = doc(db, \"buybusy-redux\", userLoggedIn.id);\n  await updateDoc(userRef, {\n    cart: arrayUnion({\n      quantity: 1,\n      ...product\n    })\n  });\n\n  // increase total amount and product quantity\n  thunkAPI.dispatch(increaseTotalAmount(product.price));\n  thunkAPI.dispatch(increaseTotalItem());\n\n  // notification\n  toast.success(\"Added to your Cart!!\");\n});\n\n// remove product from the cart\nexport const removeFromCartThunk = createAsyncThunk(\"product/removeFromCart\", async (product, thunkAPI) => {\n  // getting user's data\n  const {\n    authReducer\n  } = thunkAPI.getState();\n  const {\n    userLoggedIn\n  } = authReducer;\n\n  // remove the product from cart in database \n  const userRef = doc(db, \"buybusy-redux\", userLoggedIn.id);\n  await updateDoc(userRef, {\n    cart: arrayRemove(product)\n  });\n\n  // returning product to the extraReducer for further operations\n  return product;\n});\n\n// async thunk to remove all the products from the cart\nexport const clearCartThunk = createAsyncThunk(\"product/emptyCart\", async (args, thunkAPI) => {\n  // getting user's data\n  const {\n    authReducer,\n    productReducer\n  } = thunkAPI.getState();\n  const {\n    userLoggedIn\n  } = authReducer;\n\n  // if no item in cart then return with message\n  if (productReducer.itemInCart === 0) {\n    toast.error(\"Nothing to remove in Cart!!\");\n    return;\n  }\n\n  // empty cart array in database\n  const userRef = doc(db, \"buybusy-redux\", userLoggedIn.id);\n  await updateDoc(userRef, {\n    cart: []\n  });\n\n  // notification\n  toast.success(\"Empty Cart!!\");\n});\n\n// async thunk to purchase all the product inside the cart\nexport const purchaseAllThunk = createAsyncThunk(\"product/purchaseAllItems\", async (args, thunkAPI) => {\n  // getting user's data \n  const {\n    authReducer,\n    productReducer\n  } = thunkAPI.getState();\n  const {\n    userLoggedIn\n  } = authReducer;\n\n  // get current data from function\n  const currentDate = getDate();\n\n  // adding order to database with data, products and amount\n  const userRef = doc(db, \"buybusy-redux\", userLoggedIn.id);\n  await updateDoc(userRef, {\n    orders: arrayUnion({\n      date: currentDate,\n      list: productReducer.cart,\n      amount: productReducer.total\n    })\n  });\n\n  // removng all the product's from cart\n  thunkAPI.dispatch(clearCartThunk());\n});\n\n// slice to manage operation of products\nconst productSlice = createSlice({\n  name: \"product\",\n  // containing cart for products, total number of products in side the cart, list of all the order placed by the user, total amount of the products inside the cart\n  initialState: {\n    cart: [],\n    itemInCart: 0,\n    myorders: [],\n    total: 0\n  },\n  reducers: {\n    // to initialize the myorder array on first render\n    setMyOrders: (state, action) => {\n      state.myorders = action.payload;\n      return;\n    },\n    // increase quantity of a product in cart\n    increaseProductQuantity: (state, action) => {\n      const index = action.payload;\n      state.cart.at(index).quantity++;\n      return;\n    },\n    // decrease quantity of a product in cart\n    decreaseProductQuantity: (state, action) => {\n      const index = action.payload;\n      state.cart.at(index).quantity--;\n      return;\n    },\n    // initialize the cart array on first render\n    setCart: (state, action) => {\n      state.cart = action.payload;\n      return;\n    },\n    // to increase the total number of items in cart\n    increaseTotalItem: (state, action) => {\n      state.itemInCart++;\n      return;\n    },\n    // to increase the total amount of products inside the cart\n    increaseTotalAmount: (state, action) => {\n      state.total += action.payload;\n      return;\n    },\n    // to decrease the total amount of products inside the cart\n    reduceTotalAmount: (state, action) => {\n      state.total -= action.payload;\n      return;\n    }\n  },\n  extraReducers: builder => {\n    // update the state after getting data from database\n    builder.addCase(getInitialCartOrdersThunk.fulfilled, (state, action) => {\n      const cart = action.payload;\n      if (cart) {\n        let sum = 0,\n          len = 0;\n        cart.map(item => {\n          Number(sum += item.price * item.quantity);\n          Number(len += item.quantity);\n        });\n        state.total = sum;\n        state.itemInCart = len;\n      }\n    })\n    // update state after increasing product quantity in cart and database\n    .addCase(increaseQuantThunk.fulfilled, (state, action) => {\n      state.itemInCart++;\n    })\n    // update state after decreasing product quantity in cart and database\n    .addCase(decreaseQuantThunk.fulfilled, (state, action) => {\n      if (state.itemInCart > 1) {\n        state.itemInCart--;\n      }\n    })\n    // update state after removing product from cart and database\n    .addCase(removeFromCartThunk.fulfilled, (state, action) => {\n      const product = action.payload;\n      // reduce item count and total amount\n      state.total -= product.quantity * product.price;\n      state.itemInCart -= product.quantity;\n      // notification\n      toast.success(\"Removed from Cart!!\");\n    })\n    // update state after removing all products from cart\n    .addCase(clearCartThunk.fulfilled, (state, action) => {\n      state.itemInCart = 0;\n      state.total = 0;\n      state.cart = [];\n    });\n  }\n});\n\n// exporting the reducer of slice\nexport const productReducer = productSlice.reducer;\n\n// exporting all the actions of reducer\nexport const {\n  setMyOrders,\n  increaseProductQuantity,\n  decreaseProductQuantity,\n  setCart,\n  increaseTotalItem,\n  increaseTotalAmount,\n  reduceTotalAmount\n} = productSlice.actions;\n\n// exporting the state of reducer to get data\nexport const productSelector = state => state.productReducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","db","updateDoc","doc","arrayUnion","onSnapshot","arrayRemove","toast","getDate","date","Date","day","month","getMonth","year","getFullYear","getInitialCartOrdersThunk","args","thunkAPI","authReducer","productReducer","getState","isLoggedIn","userLoggedIn","unsub","id","data","dispatch","setCart","cart","setMyOrders","orders","updateCartInDatabase","userRef","increaseQuantThunk","product","index","findIndex","item","name","increaseProductQuantity","increaseTotalAmount","price","decreaseQuantThunk","quantity","removeFromCartThunk","decreaseProductQuantity","reduceTotalAmount","addToCartThunk","error","success","increaseTotalItem","clearCartThunk","itemInCart","purchaseAllThunk","currentDate","list","amount","total","productSlice","initialState","myorders","reducers","state","action","payload","at","extraReducers","builder","addCase","fulfilled","sum","len","map","Number","reducer","actions","productSelector"],"sources":["C:/Users/kruna/Desktop/MERN STACK DEVELOPER/5_ReactJs/Projects/4_BuyBusy-2/src/Redux/Reducers/productReducer.js"],"sourcesContent":["\n// for creating slice and AsycnThunk\nimport { createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\n\n// firebase database\nimport {db} from \"../../firebaseInit\";\nimport { updateDoc, doc, arrayUnion, onSnapshot, arrayRemove } from \"firebase/firestore\";\n\n// for toast notificatioins\nimport { toast } from \"react-toastify\";\n\n\n\n// return date in yy/mm/dd format\nfunction getDate(){\n    // getting current date\n    const date = new Date();\n    // day \n    let day = date.getDate();\n    // month\n    let month = date.getMonth() + 1;\n    // year\n    let year = date.getFullYear();\n    // yy/mm/dd format\n    return(`${year}-${month}-${day}`);\n}\n\n\n\n// async thunk to get initial Data of cart items and order placed by user from database\nexport const getInitialCartOrdersThunk = createAsyncThunk(\n    'product/getCartOrders',\n    (args,thunkAPI) => {\n        // getting user's data from redux store\n        const {authReducer,productReducer} = thunkAPI.getState();\n        const {isLoggedIn,userLoggedIn} = authReducer;\n        \n        // whether user logged In\n        if(isLoggedIn){\n            // getting real-time update of data\n\n            const unsub = onSnapshot(doc(db, \"buybusy-redux\",userLoggedIn.id), (doc) => {\n                // storing all the data in cart\n                const data = doc.data();\n                thunkAPI.dispatch(setCart(data.cart));\n                thunkAPI.dispatch(setMyOrders(data.orders));\n            });\n            \n            // returning the cart to extraReducer for further operations\n            return productReducer.cart;\n        }\n    }\n)\n\n\n\n// async thunk to update cart inside the database\nconst updateCartInDatabase = createAsyncThunk(\n    'product/updateCartInDatabase',\n    async(args,thunkAPI) => {\n\n        // user's data from initialState\n        const {authReducer, productReducer} = thunkAPI.getState();\n        const { userLoggedIn } = authReducer;\n\n        // update the cart inside the firebase database\n        const userRef = doc(db, \"buybusy-redux\", userLoggedIn.id);\n        await updateDoc(userRef, {\n            cart: productReducer.cart\n        });\n    }\n)\n\n\n\n// increase product quantity in cart and database\nexport const increaseQuantThunk = createAsyncThunk(\n    \"product/increaseProductQuantity\",\n    async (product,thunkAPI) => {\n        // user's data\n        const {productReducer} = thunkAPI.getState();\n\n        // finding product inside the cart\n        const index=productReducer.cart.findIndex((item) => item.name === product.name);\n        \n        // increase the quantity of product in initialState cart\n        thunkAPI.dispatch(increaseProductQuantity(index));      \n        \n        // increase total amount of products in cart\n        thunkAPI.dispatch(increaseTotalAmount(product.price));\n\n        // update the cart inside the database\n        thunkAPI.dispatch(updateCartInDatabase());\n    }\n)\n\n\n// decrease the quantity of product in cart and database\nexport const decreaseQuantThunk = createAsyncThunk(\n    \"product/decreaseProductQuantity\",\n    async(product,thunkAPI) => {\n\n        // getting user's data \n        const { productReducer } = thunkAPI.getState();\n        \n        // finding the product inside the cart \n        const index=productReducer.cart.findIndex((item) => item.name === product.name);\n        \n        // if quantity of product is 1 then remove it from the cart\n        if(productReducer.cart[index].quantity === 1){\n            thunkAPI.dispatch(removeFromCartThunk(product));\n            return;\n        }\n\n        // else\n        // decrease the quantity of product inside the cart\n        thunkAPI.dispatch(decreaseProductQuantity(index));\n\n        // reduce the amount of product from total amount of cart\n        thunkAPI.dispatch(reduceTotalAmount(productReducer.cart[index].price));\n\n        // update the cart inside the database\n        thunkAPI.dispatch(updateCartInDatabase());\n        \n    }\n)\n\n\n// async thunk for adding a new product to the cart\nexport const addToCartThunk = createAsyncThunk(\n    \"product/addToCart\",\n    async (product,thunkAPI) => {\n        // getting user's data \n        const { authReducer,productReducer } = thunkAPI.getState();\n        const {isLoggedIn,userLoggedIn} = authReducer;\n        \n        // check whether user is logged in or not\n        if(!isLoggedIn){\n            toast.error(\"Please first Login !!!\");\n            return;\n        }\n\n        // checking whether the product already in the cart\n        const index=productReducer.cart.findIndex((item) => item.name === product.name);\n        if(index !== -1){\n            // if product already in cart then increase quantity and return\n            thunkAPI.dispatch(increaseQuantThunk(productReducer.cart[index]));\n            toast.success(\"Product Quantity Increased!!\");\n            return;\n        }\n\n        // else\n        // add product to the cart of loggedIn user in database\n        const userRef = doc(db, \"buybusy-redux\", userLoggedIn.id);\n        await updateDoc(userRef, {\n            cart: arrayUnion({quantity:1,...product})\n        });\n        \n        // increase total amount and product quantity\n        thunkAPI.dispatch(increaseTotalAmount(product.price));\n        thunkAPI.dispatch(increaseTotalItem());\n\n        // notification\n        toast.success(\"Added to your Cart!!\");\n    }\n);\n\n\n// remove product from the cart\nexport const removeFromCartThunk = createAsyncThunk(\n    \"product/removeFromCart\",\n    async(product,thunkAPI) => {\n\n        // getting user's data\n        const { authReducer } = thunkAPI.getState();\n        const {userLoggedIn} = authReducer;\n        \n        // remove the product from cart in database \n        const userRef = doc(db, \"buybusy-redux\", userLoggedIn.id);\n        await updateDoc(userRef, {\n            cart: arrayRemove(product)\n        });\n\n        // returning product to the extraReducer for further operations\n        return product;\n    }\n);\n\n\n// async thunk to remove all the products from the cart\nexport const clearCartThunk = createAsyncThunk(\n    \"product/emptyCart\",\n    async (args,thunkAPI) => {\n\n        // getting user's data\n        const { authReducer, productReducer } = thunkAPI.getState();\n        const {userLoggedIn} = authReducer;\n        \n        // if no item in cart then return with message\n        if(productReducer.itemInCart === 0){\n            toast.error(\"Nothing to remove in Cart!!\");    \n            return;\n        }\n\n        // empty cart array in database\n        const userRef = doc(db, \"buybusy-redux\", userLoggedIn.id);\n        await updateDoc(userRef, {\n            cart: []\n        });\n\n        // notification\n        toast.success(\"Empty Cart!!\");\n    }\n);\n\n\n// async thunk to purchase all the product inside the cart\nexport const purchaseAllThunk = createAsyncThunk(\n    \"product/purchaseAllItems\",\n    async (args,thunkAPI) => {\n\n        // getting user's data \n        const { authReducer,productReducer} = thunkAPI.getState();\n        const {userLoggedIn} = authReducer;\n        \n        // get current data from function\n        const currentDate=getDate();\n        \n        // adding order to database with data, products and amount\n        const userRef = doc(db, \"buybusy-redux\", userLoggedIn.id);\n        await updateDoc(userRef, {\n            orders: arrayUnion({date:currentDate,\n                                list:productReducer.cart,\n                                amount:productReducer.total})\n            }\n        );\n\n        // removng all the product's from cart\n        thunkAPI.dispatch(clearCartThunk());\n    }\n);\n\n\n\n// slice to manage operation of products\nconst productSlice = createSlice({\n    name:\"product\",\n    // containing cart for products, total number of products in side the cart, list of all the order placed by the user, total amount of the products inside the cart\n    initialState:{\n        cart:[],\n        itemInCart:0,\n        myorders:[],\n        total:0,\n    },\n    reducers:{\n        // to initialize the myorder array on first render\n        setMyOrders: (state,action) => {\n            state.myorders = action.payload;\n            return;\n        },\n        // increase quantity of a product in cart\n        increaseProductQuantity: (state,action) => {\n            const index = action.payload;\n            state.cart.at(index).quantity++;\n            return; \n        },\n        // decrease quantity of a product in cart\n        decreaseProductQuantity: (state,action) => {\n            const index = action.payload;\n            state.cart.at(index).quantity--;\n            return;\n        },\n        // initialize the cart array on first render\n        setCart: (state,action) => {\n            state.cart = action.payload;\n            return;\n        },\n        // to increase the total number of items in cart\n        increaseTotalItem: (state,action) => {\n            state.itemInCart++;\n            return;\n        },\n        // to increase the total amount of products inside the cart\n        increaseTotalAmount: (state,action) => {\n            state.total += action.payload;\n            return;\n        },\n        // to decrease the total amount of products inside the cart\n        reduceTotalAmount: (state,action) => {\n            state.total -= action.payload;\n            return;\n        }\n    },\n    extraReducers: (builder) => {\n        // update the state after getting data from database\n        builder.addCase(getInitialCartOrdersThunk.fulfilled, (state,action) => {\n            const cart = action.payload;\n            if(cart){    \n                let sum=0,len =0;\n                cart.map((item) => {\n                    Number(sum += item.price * item.quantity);\n                    Number(len += item.quantity);\n                });\n                state.total = sum;\n                state.itemInCart = len;\n            }\n        })\n        // update state after increasing product quantity in cart and database\n        .addCase(increaseQuantThunk.fulfilled, (state,action) => {\n            state.itemInCart++;\n        })\n        // update state after decreasing product quantity in cart and database\n        .addCase(decreaseQuantThunk.fulfilled, (state,action) => {\n            if(state.itemInCart > 1){\n                state.itemInCart--;\n            }\n        })\n        // update state after removing product from cart and database\n        .addCase(removeFromCartThunk.fulfilled, (state,action) => {\n            const product = action.payload;\n            // reduce item count and total amount\n            state.total -= product.quantity * product.price;\n            state.itemInCart -= product.quantity;\n            // notification\n            toast.success(\"Removed from Cart!!\");\n        })\n        // update state after removing all products from cart\n        .addCase(clearCartThunk.fulfilled, (state,action) => {\n            state.itemInCart = 0;\n            state.total = 0;\n            state.cart=[];\n        })\n    }\n});\n\n\n// exporting the reducer of slice\nexport const productReducer = productSlice.reducer;\n\n// exporting all the actions of reducer\nexport const { setMyOrders, \n            increaseProductQuantity, \n            decreaseProductQuantity, \n            setCart, \n            increaseTotalItem,\n            increaseTotalAmount, \n            reduceTotalAmount } = productSlice.actions;\n\n\n// exporting the state of reducer to get data\nexport const productSelector = (state) => state.productReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}